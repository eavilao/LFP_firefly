function LFPpop_sim(exp)
% Only to extract and plot spectrograms and coherence over time.

% %% load, extract, and save relevant variables

% path = '/Users/eavilao/Documents/Temp_data/lfp analysis'; 
% cd(path)

% fnames = dir('*.mat');
% cnt=1;
% for i = 1:length(fnames)
%     fprintf(['****   Loading file ' num2str(fnames(i).name) '   ****' '\n'])
%     load(fnames(i).name);
%     for sess = 1:length(experiments.sessions)
%         if ~isempty(experiments.sessions(sess).lfps(1).stats)
%             if experiments.sessions(sess).monk_id == 53
%                 for nlfps = 1:length(experiments.sessions(1).lfps)
%                     indx_MST(nlfps) = strcmp(experiments.sessions(sess).lfps(nlfps).brain_area, 'MST');
%                     indx_PFC(nlfps) = strcmp(experiments.sessions(sess).lfps(nlfps).brain_area, 'PFC');
%                     indx_PPC(nlfps) = strcmp(experiments.sessions(sess).lfps(nlfps).brain_area, 'PPC');
%                 end
%             else
%                 for nlfps = 1:length(experiments.sessions(1).lfps)
%                     indx_MST(nlfps) = strcmp(experiments.sessions(sess).lfps(nlfps).brain_area, 'MST');
%                     indx_PPC(nlfps) = strcmp(experiments.sessions(sess).lfps(nlfps).brain_area, 'PPC');
%                 end
%             end
%             
%             % extract
%             if experiments.sessions(sess).monk_id == 53
%                 exp(cnt).area.MST.lfps.stats = [experiments.sessions(sess).lfps(indx_MST).stats];
%                 exp(cnt).area.PFC.lfps.stats = [experiments.sessions(sess).lfps(indx_PFC).stats];
%                 exp(cnt).area.PPC.lfps.stats = [experiments.sessions(sess).lfps(indx_PPC).stats];
%             else
%                 exp(cnt).area.MST.lfps.stats = [experiments.sessions(sess).lfps(indx_MST).stats];
%                 exp(cnt).area.PPC.lfps.stats = [experiments.sessions(sess).lfps(indx_PPC).stats];
%             end
%             exp(cnt).pop = experiments.sessions(sess).populations.lfps.stats;
%             exp(cnt).monk_id = experiments.sessions(sess).monk_id;
%         end
%     cnt=cnt+1;     
%     end
%     
%     disp('Clearing experiments... . . .')
%     clear experiments
% end
% 
% % save
% disp('Saving... . . .')
% save('exp_lfp_stats_pop','exp', '-v7.3');


%% PSD
%% avg per session
trialtype = fieldnames(exp(1).area.MST.lfps.stats(1).trialtype); events = fieldnames(exp(1).area.MST.lfps.stats(1).trialtype.all.events);
for i = 1:length(exp) % num of sessions
    nareas = numel(fieldnames(exp(i).area)); areas = fieldnames(exp(i).area);
    for a = 1:length(areas) % num of areas
        for type = 1:length(trialtype) % num of trial types
            nconds = length(exp(i).area.(areas{a}).lfps.stats(1).trialtype.(trialtype{type})); clear cond
            for cond = 1:nconds
                clear pow pow_eye
                for ch = 1:length(exp(i).area.(areas{a}).lfps.stats) % extract per channel
                    if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                        pow_eye(ch,:) = exp(i).area.(areas{a}).lfps.stats(ch).trialtype.(trialtype{type})(cond).spectrum.psd;
                        freq_eye = exp(i).area.(areas{a}).lfps.stats(ch).trialtype.(trialtype{type})(cond).spectrum.freq;
                    else
                        pow(ch,:) = exp(i).area.(areas{a}).lfps.stats(ch).trialtype.(trialtype{type})(cond).spectrum.psd;
                    end
                end
                % store
                freq = exp(1).area.MST.lfps.stats(1).trialtype.all.spectrum.freq;
                if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                    psden_eye(i).area.(areas{a}).(trialtype{type})(cond).ch = pow_eye; 
                    psden_eye(i).area.(areas{a}).(trialtype{type})(cond).mu = nanmean(pow_eye);
                    psden_eye(i).area.(areas{a}).(trialtype{type})(cond).sem = nanstd(pow_eye)/sqrt(length(ch));
                    psden_eye(i).area.(areas{a}).(trialtype{type})(cond).max = max(max(nanmean(pow_eye)));
                else
                    psden(i).area.(areas{a}).(trialtype{type})(cond).ch = pow;
                    psden(i).area.(areas{a}).(trialtype{type})(cond).mu = nanmean(pow);
                    psden(i).area.(areas{a}).(trialtype{type})(cond).sem = nanstd(pow)/sqrt(length(ch));
                    psden(i).area.(areas{a}).(trialtype{type})(cond).max = max(max(nanmean(pow)));
                end                
            end
        end
    end
    psden(i).monk_id = exp(i).monk_id;
end

%% normalize by max
% get max values 
cnt=1;
for i = 1:length(exp) % num of sessions
    nareas = numel(fieldnames(exp(i).area)); areas = fieldnames(exp(i).area);
    for a = 1:length(areas) % num of areas
        for type = 1:length(trialtype) % num of trial types
            nconds = length(exp(i).area.(areas{a}).lfps.stats(1).trialtype.(trialtype{type})); clear cond
            for cond = 1:nconds
                if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                    max_psd(cnt) = psden_eye(i).area.(areas{a}).(trialtype{type})(cond).max;
                else
                    max_psd(cnt) = psden(i).area.(areas{a}).(trialtype{type})(cond).max;
                end
                cnt = cnt+1;
            end
        end
    end
end
%maxPSDval = max(max_psd(max_psd<1000)); 
maxPSDval = 1; % take the max between 0 and 50 Hz

% normalize for max of max (between all conditions)
for i = 1:length(exp) % num of sessions
    nareas = numel(fieldnames(exp(i).area)); areas = fieldnames(exp(i).area);
    for a = 1:length(areas) % num of areas
        for type = 1:length(trialtype) % num of trial types
            nconds = length(exp(i).area.(areas{a}).lfps.stats(1).trialtype.(trialtype{type})); clear cond
            for cond = 1:nconds
                if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                    psden_eye(i).area.(areas{a}).(trialtype{type})(cond).mu_norm = psden_eye(i).area.(areas{a}).(trialtype{type})(cond).mu/maxPSDval;
                else
                    psden(i).area.(areas{a}).(trialtype{type})(cond).mu_norm = psden(i).area.(areas{a}).(trialtype{type})(cond).mu/maxPSDval;
                end
            end
        end
    end
end

%% avg between sessions for each monkey
monks = unique([psden.monk_id]);
for i = 1:length(monks)
    m = [psden.monk_id] == monks(i); p_monk = psden(m); p_monk_eye = psden_eye(m);
    nareas = numel(fieldnames(psden(i).area)); areas = fieldnames(psden(i).area);
    for a = 1:length(areas)
        trialtype = [fieldnames(p_monk(i).area.(areas{a})); fieldnames(p_monk_eye(i).area.(areas{a}))];
        for type = 1:length(trialtype)
            if type == 10 | 11;  % eyes
                nconds = 1; clear cond
            else
                nconds = length(p_monk(i).area.(areas{a}).(trialtype{type})); clear cond
            end
            for cond = 1:nconds
                clear psd_eye_all psd_all
                for k = 1:length(p_monk)
                    if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                        psd_eye_all(k,:) = p_monk_eye(k).area.(areas{a}).(trialtype{type})(cond).mu_norm;
                    else
                        psd_all(k,:) = p_monk(k).area.(areas{a}).(trialtype{type})(cond).mu_norm;
                    end
                end
                if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                    monk(i).pw.area.(areas{a}).(trialtype{type})(cond).mu_sess = nanmean(psd_eye_all); % average per trial type
                    monk(i).pw.area.(areas{a}).(trialtype{type})(cond).std_sess = nanstd(psd_eye_all);
                else
                    monk(i).pw.area.(areas{a}).(trialtype{type})(cond).mu_sess = nanmean(psd_all);  % average per trial type
                    monk(i).pw.area.(areas{a}).(trialtype{type})(cond).std_sess = nanstd(psd_all);
                end
            end
            
        end
    end
    monk(i).pw.freq = exp(1).area.MST.lfps.stats(1).trialtype.all.spectrum.freq;
    monk(i).pw.freq_eye = exp(1).area.MST.lfps.stats(1).trialtype.eyesfree.spectrum.freq;
end
 
%% avg across monkeys
clear all_m all_m_eye
for i=1:length(monks), area_m{i} = fieldnames(monk(i).pw.area); end
areas = intersect(string(area_m{1}), string(area_m{2}));
for a = 1:length(areas)
    for type = 1:length(trialtype)
       nconds = length(monk(i).pw.area.(areas{a}).(trialtype{type})); clear cond
        for cond = 1:nconds
            for i = 1:length(monk)  
                    if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                        all_m_eye(i,:) = monk(i).pw.area.(areas{a}).(trialtype{type})(cond).mu_sess;
                    else
                        all_m(i,:) = monk(i).pw.area.(areas{a}).(trialtype{type})(cond).mu_sess;
                    end
                    
                    if strcmp((trialtype{type}), 'eyesfree') | strcmp((trialtype{type}), 'eyesfixed')
                        all_monks.pw.area.(areas{a}).(trialtype{type})(cond).mu = nanmean(all_m_eye);
                        all_monks.pw.area.(areas{a}).(trialtype{type})(cond).sem = nanstd(all_m_eye);
                    else
                        all_monks.pw.area.(areas{a}).(trialtype{type})(cond).mu = nanmean(all_m);
                        all_monks.pw.area.(areas{a}).(trialtype{type})(cond).sem = nanstd(all_m);
                    end
            end
        end
    end
end
%%
all_monks.pw.freq = exp(1).area.MST.lfps.stats(1).trialtype.all.spectrum.freq;
all_monks.pw.freq_eye = exp(1).area.MST.lfps.stats(1).trialtype.eyesfree.spectrum.freq;

%% spectrogram
% average across channels
trialtype = fieldnames(exp(1).area.MST.lfps.stats(1).trialtype); events = fieldnames(exp(1).area.MST.lfps.stats(1).trialtype.all.events);
for i = 1:length(exp) % num of sessions
    nareas = numel(fieldnames(exp(i).area)); areas = fieldnames(exp(i).area);
    for a = 1:length(areas) % num of areas
        for type = 1:3 % length(trialtype) % num of trial types
            nconds = length(exp(i).area.(areas{a}).lfps.stats(1).trialtype.(trialtype{type})); clear cond
            for cond = 1:nconds
                for ev = 1:length(events)
                    for ch = 1:length(exp(i).area.(areas{a}).lfps.stats) % extract per channel
                        spec(ch,:,:) = real(exp(i).area.(areas{a}).lfps.stats(ch).trialtype.(trialtype{type})(cond).events.(events{ev}).p_spectrogram');
                    end
                    % store and normalize by max
                    p_spec(i).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).pow_mu = squeeze(nanmean(spec,1))/max(max(squeeze(nanmean(spec,1))));
                    p_spec(i).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).std = squeeze(nanstd(spec,1)/sqrt(length(ch)));
                    p_spec(i).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).freq = exp(i).area.(areas{a}).lfps.stats(ch).trialtype.(trialtype{type})(cond).events.(events{ev}).freq_spectrogram;
                    p_spec(i).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).ts = exp(i).area.(areas{a}).lfps.stats(ch).trialtype.(trialtype{type})(cond).events.(events{ev}).ts_spectrogram; 
                end
            end
        end
    end
    p_spec(i).monk_id = exp(i).monk_id;
end
%% avg between sessions for each monkey
monks = unique([p_spec.monk_id]);
for i = 1:length(monks)
    m = [p_spec.monk_id] == monks(i); p_monk = p_spec(m); 
    nareas = numel(fieldnames(p_monk(i).area)); areas = fieldnames(p_monk(i).area);
    for a = 1:length(areas)
        trialtype = fieldnames(p_monk(i).area.(areas{a})); 
        for type = 1:length(trialtype)
            nconds = length(p_monk(i).area.(areas{a}).(trialtype{type})); clear cond
            for cond = 1:nconds
                for ev = 1:length(events)
                    clear spec
                for k = 1:length(p_monk)
                        spec(k,:,:) = p_monk(k).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).pow_mu;
                        spec_f(k,:,:) = p_monk(k).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).freq;
                        spec_ts(k,:,:) = p_monk(k).area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).ts;
                end
                    monk(i).spec.area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).mu_sess = squeeze(nanmean(spec,1));  % average per trial type
                    monk(i).spec.area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).std_sess = squeeze(nanstd(spec,1));
                    monk(i).spec.area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).freq_sess = squeeze(nanstd(spec_f,1));
                    monk(i).spec.area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).ts_sess = squeeze(spec_ts(1,:));
                end
            end
            
        end
    end
end

%% avg across monkeys
clear all_m
for i=1:length(monks), area_m{i} = fieldnames(monk(i).spec.area); end 
    areas = intersect(string(area_m{1}), string(area_m{2}));
for a = 1:length(areas)
    for type = 1:length(trialtype)
        nconds = length(monk(i).spec.area.(areas{a}).(trialtype{type})); clear cond
        for cond = 1:nconds
            for ev = 1:length(events)
                for i = 1:length(monk)
                        all_m(i,:,:) = monk(i).spec.area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).mu_sess;
                end
                all_monks.spec.area.(areas{a}).(trialtype{type})(cond).events.(events{ev}).mu = squeeze(nanmean(all_m,1)); 
            end
        end
    end
end

%% coherogram
%% avg between sessions for each monkey
monks = unique([exp.monk_id]); events = fieldnames(exp(1).area.MST.lfps.stats(1).trialtype.all.events);
for i = 1:length(monks)
    m = [exp.monk_id] == monks(i); p_monk = exp(m);
    coh_areas= fieldnames(p_monk(i).pop.trialtype.all.events.move);
    trialtype = fieldnames(p_monk(i).pop.trialtype);
    for type = 1:length(trialtype)
        nconds = length(p_monk(i).pop.trialtype.(trialtype{type})); clear cond
        for cond = 1:nconds
            clear coh_ar coh_ev coh_phi coh_ts coh_freq
            for ev = 1:length(events)
                for coh_ar = 1:length(coh_areas)
                    if  (string(trialtype(type)) == 'reward') && (cond == 2) % coher only for rewarded trials in every event.
                        coh_ev(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coher;
                        coh_phi(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coherPhi;
                        coh_ts(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coher_ts;
                        coh_freq(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coher_freq;
                    elseif ~(string(trialtype(type)) == 'reward')
                        coh_ev(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coher;
                        coh_phi(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coherPhi;
                        coh_ts(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coher_ts;
                        coh_freq(coh_ar,:,:) = p_monk(i).pop.trialtype.(trialtype{type})(cond).events.(events{ev}).(coh_areas{coh_ar}).coher_freq; 
                    end
                end
                % coherogram mean
                for coh_ar = 1:length(coh_areas)
                    if (string(trialtype(type)) == 'reward') && (cond == 2)
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_mu = squeeze(nanmean(coh_ev,1));
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_phi_mu = squeeze(nanmean(coh_phi,1));
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_ts = squeeze(nanmean(coh_ts,1));
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_freq = squeeze(nanmean(coh_freq,1));
                    elseif ~(string(trialtype(type)) == 'reward')
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_mu = squeeze(nanmean(coh_ev,1));
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_phi_mu = squeeze(nanmean(coh_phi,1));
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_ts = squeeze(nanmean(coh_ts,1));
                        monk(i).coher.trialtype.(trialtype{type}).events.(events{ev}).(coh_areas{coh_ar}).coher_freq = squeeze(nanmean(coh_freq,1));
                    end
                end
            end
        end
    end
end

%% Compute CSD (only for MST for now) for each session
monks = unique([exp.monk_id]); areas = fieldnames(p_monk(1).area); trialtype = fieldnames(p_monk(i).pop.trialtype); events = fieldnames(exp(1).area.MST.lfps.stats(1).trialtype.all.events);
for ii = 1:length(monks)
    m = [exp.monk_id] == monks(ii); sess = exp(m);
    for s = 1:length(sess)
        for type = 1:length(trialtype)
            nconds = length(exp(s).area.MST.lfps.stats(1).trialtype.(trialtype{type})); clear cond
            for cond = 1:nconds
                for ev = 1:length(events)
                    t = sess(s).area.MST.lfps.stats(1).trialtype.(trialtype{type})(cond).events.(events{ev}).time; %t_win = t(t >= -0.5 & t <= 0.5);
                    clear wave
                    for ch = 1:length(exp(s).area.MST.lfps.stats)
                        wave(ch,:) = sess(s).area.MST.lfps.stats(ch).trialtype.(trialtype{type})(cond).events.(events{ev}).potential_mu; %(t >= -0.5 & t <= 0.5);
                    end
                    % compute csd
                    monk(ii).csd_sess(s).area.MST.trialtype.(trialtype{type})(cond).events.(events{ev}).csd = computecsd(wave, t, 0.1); % 0.1 electrode distance
                    monk(ii).csd_sess(s).area.MST.trialtype.(trialtype{type})(cond).events.(events{ev}).time = t;
                end
            end
        end
    end
end

%% Save
disp('                 Done, saving . . .     ')

save('lfp_pop_sim_no_norm', 'monk', 'all_monks', '-v7.3');

%% Avg across monkeys
% Wait on this to see how it looks per monkey.

%% Plot 



